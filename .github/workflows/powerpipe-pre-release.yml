name: Powerpipe - Pre-Release


on:
  workflow_dispatch:
    inputs:
      pre_release_identifier:
        type: choice
        description: 'Select Pre-Release Identifier'
        options:
          - alpha
          - beta
          - rc
        required: true

env:
  PROJECT_ID: steampipe
  ORG: turbot
  CORE_REPO: us-docker.pkg.dev/steampipe/steampipe
  ASSET_IMAGE_NAME: assets
  GH_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}

jobs:

  # TODO Acceptance test job before build and release

  verify_asset_unreleased:
    name: Verify Assets Unreleased
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.verify.conclusion }}

    steps:
      - name: Calculate version
        id: calculate_version
        run: |
          VERSION_JSON=$(cat powerpipe/version.json)
          MAJOR=$(echo $VERSION_JSON | jq '.major')
          MINOR=$(echo $VERSION_JSON | jq '.minor')
          PATCH=$(echo $VERSION_JSON | jq '.patch')
          VERSION="v$MAJOR.$MINOR.$PATCH"
          
          if [ "${{ github.event.inputs.pre_release_identifier }}" = "alpha" ]; then
            echo "VERSION=${VERSION}-alpha.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.pre_release_identifier }}" = "beta" ]; then
            echo "VERSION=${VERSION}-beta.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.pre_release_identifier }}" = "rc" ]; then
            echo "VERSION=${VERSION}-rc.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          fi
      
      - name: Trim asset version prefix and Validate
        run: |-
          echo $VERSION
          trim=${VERSION#"v"}
          echo $trim
          if [[ $trim =~  ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
            echo "Version OK: $trim"
          else
            echo "Invalid version: $trim"
            exit 1
          fi
          echo "VERSION=${trim}" >> $GITHUB_ENV

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          service_account: ${{ secrets.GCP_GITHUB_ACTION_PUSH_ARTIFACTS }}
          credentials_json: ${{ secrets.GCP_GITHUB_ACTION_PUSH_ARTIFACTS_CREDENTIAL_JSON }}

      - name: Get GCloud CLI
        uses: google-github-actions/setup-gcloud@v2.0.1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup GCloud CLI
        run: |-
          gcloud config list
          gcloud components install beta
          gcloud components install alpha --quiet
          gcloud beta auth configure-docker us-docker.pkg.dev

      - name: Delete the tag if it already exists
        id: verify
        continue-on-error: true
        run: |-
          [ $(gcloud beta artifacts docker tags list ${{ env.CORE_REPO }}/${{ env.ASSET_IMAGE_NAME }}  --project ${{ env.PROJECT_ID }}  --format=json | jq 'map(select(.tag | endswith("$VERSION"))) | length') -eq 1 ]
          gcloud beta artifacts docker tags delete ${{ env.CORE_REPO }}/${{ env.ASSET_IMAGE_NAME }}:"$VERSION"

  build_and_release_assets:
    name: Build and Release Assets
    needs: [verify_asset_unreleased]
    if: needs.verify_asset_unreleased.outputs.status == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Calculate version
        id: calculate_version
        run: |
          VERSION_JSON=$(cat powerpipe/version.json)
          MAJOR=$(echo $VERSION_JSON | jq '.major')
          MINOR=$(echo $VERSION_JSON | jq '.minor')
          PATCH=$(echo $VERSION_JSON | jq '.patch')
          VERSION="v$MAJOR.$MINOR.$PATCH"
          
          if [ "${{ github.event.inputs.pre_release_identifier }}" = "alpha" ]; then
            echo "VERSION=${VERSION}-alpha.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.pre_release_identifier }}" = "beta" ]; then
            echo "VERSION=${VERSION}-beta.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.pre_release_identifier }}" = "rc" ]; then
            echo "VERSION=${VERSION}-rc.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          fi

      - name: Trim asset version prefix and Validate
        run: |-
          echo $VERSION
          trim=${VERSION#"v"}
          echo $trim
          if [[ $trim =~  ^[0-9]+\.[0-9]+\.[0-9]+(-.+)?$ ]]; then
            echo "Version OK: $trim"
          else
            echo "Invalid version: $trim"
            exit 1
          fi
          echo "VERSION=${trim}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.ref }}

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          service_account: ${{ secrets.GCP_GITHUB_ACTION_PUSH_ARTIFACTS }}
          credentials_json: ${{ secrets.GCP_GITHUB_ACTION_PUSH_ARTIFACTS_CREDENTIAL_JSON }}

      - name: Get GCloud CLI
        uses: google-github-actions/setup-gcloud@v2.0.1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Setup GCloud CLI
        run: |-
          gcloud config list
          gcloud components install beta
          gcloud components install alpha --quiet
          gcloud beta auth configure-docker us-docker.pkg.dev

      - name: Verify ORAS
        run: |- 
          gcloud beta auth configure-docker us-docker.pkg.dev
          oras version
        
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Setup Yarn
        working-directory: ./ui/dashboard
        run: |-
          rm -rf ./build

      - name: YARN Install
        working-directory: ./ui/dashboard
        run: |-
          unset CI
          yarn install

      - name: Generate dashboard UI icons
        working-directory: ./ui/dashboard
        run: |-
          make setup

      - name: Run Unit Tests
        working-directory: ./ui/dashboard
        run: |
          yarn install
          CI=true yarn test

      - name: YARN Build
        working-directory: ./ui/dashboard
        run: |-
          unset CI
          yarn build
        env:
          REACT_APP_HEAP_ID: ${{ secrets.HEAP_ANALYTICS_PRODUCTION_ID }}
          REACT_APP_VERSION: $VERSION

      - name: Move Build Assets
        run: |-
          mkdir -p dashboard_ui_build
          mv ./ui/dashboard/build/* dashboard_ui_build/
          ls -la dashboard_ui_build

      - name: Create a version file
        run: |-
          JSON_STRING=$( jq -n \
              --arg version "$VERSION" \
            '{
                "version":$version,
            }' )

            echo $JSON_STRING > ./dashboard_ui_build/versions.json

      - name: Create Image Config File
        run: |-
          JSON_STRING=$( jq -n \
            --arg name "${{ env.ASSET_IMAGE_NAME }}" \
            --arg organization "$ORG" \
            --arg version "$VERSION" \
            --arg schemaVersion "$CONFIG_SCHEMA_VERSION" \
            '{schemaVersion: $schemaVersion, assets: { name: $name, organization: $organization, version: $version} }' )

          echo $JSON_STRING > config.json

      - name: Create Image Annotations File
        run: |-
          JSON_STRING=$( jq -n \
              --arg title "${{ env.ASSET_IMAGE_NAME }}" \
              --arg desc "$ORG" \
              --arg version "$VERSION" \
              --arg timestamp "$(date +%FT%TZ)" \
              --arg vendor "Turbot HQ, Inc." \
            '{
                "$manifest": {
                    "org.opencontainers.image.title": $title,
                    "org.opencontainers.image.description": $desc,
                    "org.opencontainers.image.version": $version,
                    "org.opencontainers.image.created": $timestamp,
                    "org.opencontainers.image.vendor":  $vendor
                }
            }' )

            echo $JSON_STRING > annotations.json        

      - name: Generate Image REF
        id: image_ref
        run: |
          cat config.json
          cat annotations.json
          cat dashboard_ui_build/versions.json
          REF="${{ env.CORE_REPO }}/${{ env.ASSET_IMAGE_NAME }}:$VERSION"
          echo "REF=$REF" >> $GITHUB_OUTPUT

      - name: Push to registry
        run: |-
          oras push ${{ steps.image_ref.outputs.REF }} \
            --config config.json:application/vnd.turbot.steampipe.config.v1+json \
            --annotation-file annotations.json \
            dashboard_ui_build:application/vnd.turbot.steampipe.assets.report.layer.v1+tar \

  build_and_release:
    name: Build and Release Powerpipe
    needs: [build_and_release_assets]
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: powerpipe
          ref: ${{ github.event.ref }}

      - name: Checkout Pipe Fittings Components repository
        uses: actions/checkout@v3
        with:
          repository: turbot/pipe-fittings
          ref: pp
          path: pipe-fittings

      - name: Calculate version
        id: calculate_version
        run: |
          VERSION_JSON=$(cat powerpipe/version.json)
          MAJOR=$(echo $VERSION_JSON | jq '.major')
          MINOR=$(echo $VERSION_JSON | jq '.minor')
          PATCH=$(echo $VERSION_JSON | jq '.patch')
          VERSION="v$MAJOR.$MINOR.$PATCH"
          
          if [ "${{ github.event.inputs.pre_release_identifier }}" = "alpha" ]; then
            echo "VERSION=${VERSION}-alpha.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.pre_release_identifier }}" = "beta" ]; then
            echo "VERSION=${VERSION}-beta.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.pre_release_identifier }}" = "rc" ]; then
            echo "VERSION=${VERSION}-rc.$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV
          fi

      - name: Tag Release
        run: |
          cd powerpipe
          git config user.name "Powerpipe GitHub Actions Bot"
          git config user.email noreply@github.com
          git tag $VERSION
          git push origin $VERSION

      # this is required, check golangci-lint-action docs
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: false # setup-go v4 caches by default, do not change this parameter, check golangci-lint-action doc: https://github.com/golangci/golangci-lint-action/pull/704

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --clean
          workdir: powerpipe
        env:
          GITHUB_TOKEN: ${{ secrets.GH_ACCESS_TOKEN }}
          VERSION: $VERSION
